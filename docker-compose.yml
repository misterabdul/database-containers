version: "3.9"

services:
  # MySQL 5.6 for my work environment
  mysql56:
    container_name: mysql56
    image: mysql:5.6
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS}
    ports:
      - 127.0.0.1:${MYSQL56_PORT}:3306
    volumes:
      - ./volumes/mysql56:/var/lib/mysql:rw
    command: --default-authentication-plugin=mysql_native_password
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  mysql:
    container_name: mysql
    image: mysql
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS}
    ports:
      - 127.0.0.1:${MYSQL_PORT}:3306
    volumes:
      - ./volumes/mysql:/var/lib/mysql:rw
    command: --default-authentication-plugin=mysql_native_password

  mariadb:
    container_name: mariadb
    image: mariadb
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASS}
    ports:
      - 127.0.0.1:${MARIADB_PORT}:3306
    volumes:
      - ./volumes/mariadb:/var/lib/mariadb:rw

  phpmyadmin:
    container_name: phpmyadmin
    image: misterabdul/phpmyadmin
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    depends_on:
      - "mysql"
      # - "mariadb"
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql
      # - PMA_HOST=mariadb
    ports:
      - 127.0.0.1:${PMA_PORT}:80

  postgres:
    container_name: postgres
    image: postgres
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
    ports:
      - 127.0.0.1:${POSTGRES_PORT}:5432
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data:rw

  pgadmin4:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    depends_on:
      - "postgres"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASS}
    ports:
      - 127.0.0.1:${PGADMIN_PORT}:80
    volumes:
      - ./volumes/pgadmin4:/var/lib/pgadmin:rw
      - ./volumes/pgadmin4:/certs/server.cert:rw
      - ./volumes/pgadmin4:/certs/server.key:rw
      - ./volumes/pgadmin4:/pgadmin4/servers.json:rw

  mongo:
    container_name: mongo
    image: mongo
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
      MONGO_INITDB_DATABASE: admin
    ports:
      - 127.0.0.1:${MONGO1_PORT}:27017
    volumes:
      - ./volumes/mongo1/data:/data/db:rw
      - ./volumes/mongo1/config:/data/configdb:rw
    command: "--replSet rsmongo --bind_ip_all --keyFile /data/configdb/keyfile.txt"

  mongo2:
    container_name: mongo2
    image: mongo
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    depends_on:
      - "mongo"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
      MONGO_INITDB_DATABASE: admin
    ports:
      - 127.0.0.1:${MONGO2_PORT}:27017
    volumes:
      - ./volumes/mongo2/data:/data/db:rw
      - ./volumes/mongo2/config:/data/configdb:rw
    command: "--replSet rsmongo --bind_ip_all --keyFile /data/configdb/keyfile.txt"

  mongo-setup:
    container_name: mongo-setup
    image: mongo
    restart: "no"
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    depends_on:
      - "mongo"
      - "mongo2"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
      MONGO_INITDB_DATABASE: admin
    volumes:
      - ./volumes/mongo-setup:/external/scripts:rw
    entrypoint: [ "/bin/sh", "-c", "/external/scripts/mongo-setup.sh" ]

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    depends_on:
      - "mongo"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASS}
      ME_CONFIG_MONGODB_SERVER: "mongo"
    ports:
      - 127.0.0.1:${MONGO_EXPRESS_PORT}:8081

  redis:
    container_name: redis
    image: redis
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    ports:
      - 127.0.0.1:${REDIS_PORT}:6379
    volumes:
      - ./volumes/redis:/data:rw

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander
    restart: unless-stopped
    stdin_open: true
    tty: true
    privileged: true
    user: "${DOCKER_USER}:${DOCKER_USERGROUP}"
    depends_on:
      - "redis"
    environment:
      REDIS_HOST: redis
    ports:
      - 127.0.0.1:${REDIS_COMMANDER_PORT}:8081

networks:
  default:
    external:
      name: ${EXTERNAL_NETWORK_NAME}
